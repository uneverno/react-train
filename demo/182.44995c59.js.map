{"version":3,"sources":["webpack://train/./src/page/result.js","webpack://train/./src/utils/request.js"],"names":["Home","props","state","data","user1","URLSearchParams","history","location","search","get","user2","this","push","s1","s2","list","Promise","all","request","then","res","setState","loading","public_repos","result","unshift","className","Result","Component","catchCB","err","msg","message","response","status","head","sessionStorage","clear","body","includes","errPrompt","axios","undefined","config","retry","__retryCount","reject","resolve","setTimeout","retryDelay","code","checkStatus","url","method","headers","FormData"],"mappings":"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","file":"182.44995c59.js","sourcesContent":["import { Component } from 'react'\r\nimport request from '@/utils/request'\r\nexport default class Home extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      data: [],\r\n      user1: new URLSearchParams(props.history.location.search).get('player1'),\r\n      user2: new URLSearchParams(props.history.location.search).get('player2') || '',\r\n    }\r\n  }\r\n  async componentDidMount() {\r\n    let { user1, user2 } = this.state\r\n    if (!user1 || !user2) {\r\n      this.props.history.push('/battle')\r\n    } else {\r\n      let s1 = '',\r\n        s2 = '',\r\n        list = []\r\n      await Promise.all([\r\n        request(`https://api.github.com/users/${user1}`)\r\n          .then((res) => {\r\n            s1 = res\r\n          })\r\n          .catch(() => {\r\n            this.setState({\r\n              loading: false,\r\n            })\r\n          }),\r\n        request(`https://api.github.com/users/${user2}`)\r\n          .then((res) => {\r\n            s2 = res\r\n          })\r\n          .catch(() => {\r\n            this.setState({\r\n              loading: false,\r\n            })\r\n          }),\r\n      ])\r\n      if (s1.public_repos > s2.public_repos) {\r\n        s1.result = 'Winner'\r\n        s2.result = 'Loser'\r\n      } else if (s1.public_repos === s2.public_repos) {\r\n        s1.result = 'Draw'\r\n        s2.result = 'Draw'\r\n      } else {\r\n        s1.result = 'Loser'\r\n        s2.result = 'Winner'\r\n      }\r\n      list.unshift(s1, s2)\r\n      this.setState({ data: list, loading: false })\r\n    }\r\n  }\r\n  render() {\r\n    let { loading, data = [] } = this.state\r\n    return <div className=\"result-page\">{<Result data={data} {...this.props} loading={loading} />}</div>\r\n  }\r\n}\r\n","import axios from 'axios'\r\nimport qs from 'qs'\r\nimport { message } from 'antd'\r\n// import { LOGINOUT_CODES, BASE_URL } from '@/assets/js/enume'\r\n\r\n// 延长超时时间60秒\r\naxios.defaults.timeout = 10000\r\n//重连次数\r\naxios.defaults.retry = 4\r\n//接口间隔时间(ms)\r\naxios.defaults.retryDelay = 1000\r\n//超时重连接口\r\naxios.interceptors.response.use(undefined, function axiosRetryInterceptor(err) {\r\n  if (err && err.message.includes('timeout')) {\r\n    let config = err.config\r\n    // If config does not exist or the retry option is not set, reject\r\n    if (!config || !config.retry) { return Promise.reject(err) }\r\n\r\n    // Set the variable for keeping track of the retry count\r\n    config.__retryCount = config.__retryCount || 0\r\n\r\n    // Check if we've maxed out the total number of retries\r\n    if (config.__retryCount >= config.retry) {\r\n      // Reject with the error\r\n      return Promise.reject(err)\r\n    }\r\n\r\n    // Increase the retry count\r\n    config.__retryCount = 1\r\n\r\n    // Create new promise to handle exponential backoff\r\n    const backoff = new Promise(function (resolve) {\r\n      setTimeout(function () {\r\n        resolve()\r\n      }, config.retryDelay || 1)\r\n    })\r\n\r\n    // Return the promise in which recalls axios to retry the request\r\n    return backoff.then(function () {\r\n      return axios(config)\r\n    })\r\n  } else {\r\n    let res = err.response\r\n    checkStatus(res)\r\n  }\r\n})\r\n\r\nfunction checkStatus(res) {\r\n  // 判断后台有响应但没有返回超时的情况表现为没有code\r\n  //   const loginoutCodes = Object.keys(LOGINOUT_CODES).map(key => LOGINOUT_CODES[key])\r\n  if (res.status >= 200 && res.status < 300) {\r\n    if ((res.data.head || {}).code === '200') {\r\n      return res\r\n    }\r\n    // else if (loginoutCodes.indexOf((res.data.head || {}).code) !== -1) {\r\n    //   sessionStorage.clear()\r\n    //   window.location.href = '/#/login'  //登录有了开\r\n    // }\r\n    else {\r\n      return '请求超时，请稍后重试'\r\n    }\r\n  }\r\n  res.response = res\r\n  throw res\r\n}\r\n\r\nfunction catchCB(err) {\r\n  let msg = '异常错误'\r\n  if (err && err.message === 'Failed to fetch') {\r\n    msg = '网络异常，请检查网络连接'\r\n  } else if (err && err.response && err.response.status === 404) {\r\n    msg = err.response.data.message\r\n  } else if (err && err.response && err.response.status === 401) {\r\n    msg = err.response.data.head.result\r\n    sessionStorage.clear()\r\n  } else if (err && err.response) {\r\n    if (typeof err.response.data === 'string') {\r\n      msg = '请求失败'\r\n    } else if (typeof err.response.data.body === 'string') {\r\n      if (!err.response.data.body) {\r\n        msg = `${err.response.data.head.result}`\r\n      } else {\r\n        msg = `${err.response.data.body}`\r\n      }\r\n    } else if (err.response.data.body && typeof err.response.data.body === 'object') {\r\n      msg = `${err.response.data.body.data || err.response.data.body.msg || err.response.data.head.result}`\r\n    } else if (err.response.data.head) {\r\n      msg = `${err.response.data.head.result}`\r\n    } else {\r\n      msg = err.response.data.message\r\n    }\r\n  } else if (err && err.message.includes('timeout')) {\r\n    msg = '请求超时，请稍后重试'\r\n  }\r\n  return msg\r\n}\r\n\r\nfunction errPrompt(msg) {\r\n  message.destroy()\r\n  message.error(msg)\r\n}\r\n\r\n/**\r\n * Requests a URL, returning a promise.\r\n *\r\n * @param  {string} method    The type we want to request\r\n * @param  {string} url       The URL we want to request\r\n * @param  {object} data      The options we want to pass to \"fetch\"\r\n * @return {object}           An object containing either \"data\" or \"err\"\r\n */\r\nconst fetch = (url, data = {}, method) => {\r\n  url = `${url}`\r\n\r\n  //   const headers = createHeaders(data)\r\n  // console.log(headers)\r\n  // 当请求为非上传类型时，设置Content-Type\r\n  const headers = {}\r\n  if (!(data instanceof FormData)) {\r\n    headers['Content-Type'] = 'application/json; charset=UTF-8'\r\n  }\r\n\r\n  // 处理参数\r\n  if (method === 'post') {\r\n    if (!(data instanceof FormData)) {\r\n      // post请求设置参数\r\n      // data = JSON.stringify(data)\r\n    }\r\n    // 发起请求\r\n    return new Promise((resolve, reject) => {\r\n      axios({\r\n        method: method,\r\n        url,\r\n        data: data,\r\n        headers: headers,\r\n      })\r\n        // .then(checkStatus)\r\n        .then((res) => {\r\n          resolve(res.data)\r\n        })\r\n        .catch((err) => {\r\n          const msg = catchCB(err)\r\n          errPrompt(msg)\r\n          reject(err)\r\n        })\r\n    })\r\n  } else {\r\n    // get请求设置参数\r\n    // url = data ? `${url}?${qs.stringify(data)}` : url\r\n    // 发起请求\r\n    return new Promise((resolve, reject) => {\r\n      axios\r\n        .get(url, {\r\n          headers: headers,\r\n        })\r\n        // .then(checkStatus)\r\n        .then((res) => {\r\n          res.body = res.data\r\n          resolve(res.data)\r\n        })\r\n        .catch((err) => {\r\n          const msg = catchCB(err)\r\n          errPrompt(msg)\r\n          reject(err)\r\n        })\r\n    })\r\n  }\r\n}\r\nexport default fetch\r\n"],"sourceRoot":""}